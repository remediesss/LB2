#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void matrix_multiply(int size) {
    int** a = (int**)malloc(size * sizeof(int*)); //указатель на массив указателей, где каждый указатель указывает на массив целых чисел
    int** b = (int**)malloc(size * sizeof(int*));
    int** c = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        a[i] = (int*)malloc(size * sizeof(int));
        b[i] = (int*)malloc(size * sizeof(int));
        c[i] = (int*)malloc(size * sizeof(int));
    }

    clock_t start, end;
    double cpu_time_used;
    int i, j, r, elem_c;

    start = clock(); // Начало измерения времени

    srand(time(0));

    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            a[i][j] = rand() % 100 + 1;
            b[i][j] = rand() % 100 + 1;
        }
    }

    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            elem_c = 0;
            for (r = 0; r < size; r++) {
                elem_c += a[i][r] * b[r][j];
            }
            c[i][j] = elem_c;
        }
    }

    end = clock(); // Конец измерения времени
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("| Size: %d x %d\t|  Runtime = %f seconds |\n", size, size, cpu_time_used);


    for (int i = 0; i < size; i++) {
        free(a[i]);
        free(b[i]);
        free(c[i]);
    }
    free(a);
    free(b);
    free(c);
}

int main(void) {
    // Размеры матриц
    int sizes[] = { 100, 200, 400, 1000, 2000, 4000, 10000 };
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]);

    // Отключение буферизации ввода и вывода
    setvbuf(stdin, NULL, _IONBF, 0);
    setvbuf(stdout, NULL, _IONBF, 0);

    for (int i = 0; i < num_sizes; i++) {
        matrix_multiply(sizes[i]);
    }

    return 0;
}
